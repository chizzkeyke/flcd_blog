import {
   START_FETCH_POSTS,
   SUCCESS_FETCH_POSTS,
   ERROR_FETCH_POSTS,

   CREATE_NEW_POST,
   READ_ONE_POST,
   CLEAR_ONE_POST,
   PATCH_POST,
   DELETE_POST
} from 'redux/actions/constants'

// const posts = JSON.parse(localStorage.getItem('posts'))

// const initialState = posts
//    ? {
//       posts: posts,
//       error: null,
//       loading: false
//    }
//    : {
//       posts: null,
//       error: null,
//       loading: false
//    }

const initialState = {
   posts: null,
   post: null,
   error: null,
   loading: false,
}

export default function postsReducer(state = initialState, action) {
   switch (action.type) {
      case START_FETCH_POSTS: {
         return {
            ...state,
            loading: true
         }
      }
      case SUCCESS_FETCH_POSTS: {
         const { posts } = action.payload
         return {
            ...state,
            posts: posts,
            loading: false,
         }
      }
      case ERROR_FETCH_POSTS: {
         const { error } = action.payload
         return {
            ...state,
            error: error,
            loading: false,
         }
      }
      case CREATE_NEW_POST: {
         const { text, created_at, post_id, update_ad, user_id } = action.payload
         const newPost = {
            text, created_at, post_id, update_ad, user_id
         }
         return {
            ...state,
            posts: [
               ...state.posts,
               newPost
            ]
         }
      }
      case READ_ONE_POST: {
         const { text, created_at, post_id, update_ad, user_id } = action.payload
         return {
            ...state,
            post: {
               text, created_at, post_id, update_ad, user_id
            },
            loading: false
         }
      }
      case CLEAR_ONE_POST: {
         return {
            ...state,
            post: null
         }
      }
      case PATCH_POST: {
         const { id, text } = action.payload
         return {
            ...state,
            posts: [...state.posts.map((post) => {
               if (post.id == id) {
                  return {
                     ...post,
                     text,
                  }
               }
               return post
            })]
         }
      }
      case DELETE_POST: {
         const { id } = action.payload
         return {
            ...state,
            posts: [ ...state.posts.filter(post => post.id !== id) ]
         }
      }
      default: {
         return state
      }
   }
}