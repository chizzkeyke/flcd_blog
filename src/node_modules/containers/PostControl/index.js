import React, { useState, useEffect } from 'react'
import { useSelector, useDispatch } from 'react-redux'
import { getOnePost, fetchDeletePost } from 'DAL/postsFetching'
import { fetchComments, fetchSetPost } from 'DAL/commentsFetch'
import { clearOnePost } from 'redux/actions/posts'
import { clearComments } from 'redux/actions/comments'
import Loader from 'components/Loader'
import Comment from 'components/Comment'
import { Link, useHistory } from 'react-router-dom'

const PostControl = (props) => {
   const postId = props.match.params.slug
   const history = useHistory()

   const post = useSelector(state => state.post.post)
   const comments = useSelector(state => state.comment.commentsSelectedPost)
   const userId = useSelector(state => state.user.currentUserData.id)
   const dispatch = useDispatch()

   const [toggleCommentInput, setToggleCommentInput] = useState(false)
   const [textComment, setTextComment] = useState('')

   useEffect(() => {
      dispatch(getOnePost(postId))
      dispatch(fetchComments(postId))
      return () => {
         dispatch(clearOnePost())
         dispatch(clearComments())
      }
   }, [dispatch])

   const deletePost = () => {
      dispatch(fetchDeletePost(postId))
      setTimeout(() => {
         history.push('/myposts')
      }, 2000)
   }

   const handleSubmitComment = event => {
      event.preventDefault()
      dispatch(fetchSetPost(textComment, postId))
      setToggleCommentInput(false)
      setTextComment('')
   }

   return (
      <div className='post_control'>
         {
            post && comments
               ? (
                  <div>
                     <h3>Пост {postId}</h3>
                     <p>{post.text}</p>
                     <p>Дата создания {post.created_at}</p>
                     <p>Пользователь <Link to={`/userData/${post.user_id}`}>№{post.user_id}</Link></p>
                     {userId === post.user_id && (
                        <div>
                           <button onClick={deletePost}>delete</button>
                           {/* <button onClick={redirectUpdatePost}>update</button> */}
                           <Link to={`/updatePost/${postId}`}><button>Update</button></Link>
                        </div>
                     )}
                     <div>
                        <button onClick={() => setToggleCommentInput(true)}>Прокоментировать</button>
                     </div>
                     {
                        toggleCommentInput
                           ? (<div>
                                 <form onSubmit={handleSubmitComment}>
                                    <textarea 
                                       placeholder='Comment...'
                                       value={textComment}
                                       onChange={e => setTextComment(e.target.value)}
                                    />
                                    <button>Send Comment</button>
                                 </form>
                           </div>)
                           : null
                     }
                     {comments.map((comment, index) => (
                        <Comment
                           text={comment.text}
                           user_id={comment.user_id}
                           key={index}
                        />
                     ))}
                  </div>
               )
               : (
                  <Loader />
               )
         }
      </div>
   )
}

export default PostControl
